name: GHA action testing

on:
  workflow_dispatch:     # Manual trigger
  schedule:              # Scheduled trigger (uncomment to use)
    - cron: '30 1 * * *' # Every day at 1:30 AM UTC
  push:                  # Push trigger
    branches:
      - main

permissions:
  id-token: write
  contents: read 

jobs:

  black-duck-scan-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3

      - name: Workflow detail api request
        shell: bash
        run: |
          echo "Ref name is $GITHUB_RUN_ID"
          echo "Source is ${{ github.server_url }}/${{ github.repository }}"
          echo "Subject is $GITHUB_WORKFLOW_REF|${{ github.run_id }}|${{ github.run_attempt }}|${{ github.run_number }}"
          echo "Job is $GITHUB_JOB"
          echo "Step id is ${{ steps.internal.id }}"

      - name: Blackduck scan
        uses: cloudbees-io-gha/black-duck-scan-publish@v2
        with:
          server-url: ${{ vars.BLACKDUCK_SERVER_URL }}
          api-token: ${{ secrets.BLACKDUCK_API_TOKEN }}

      - name: Notify failures
        if: ${{ failure() }}
        uses: ./actions/notify-slack-action
        with:
          webhook-url: ${{ secrets.CBP_BT_SLACK_WEBHOOK_URL }}
          action-name: black-duck-scan-publish

  coverity-scan-publish:
    runs-on: ubuntu-latest
    outputs:
      coverity-job-output-critical: ${{ steps.coverity-step.outputs.critical-count }}
      coverity-job-output-very-high: ${{ steps.coverity-step.outputs.very-high-count }}
      coverity-job-output-high: ${{ steps.coverity-step.outputs.high-count }}
      coverity-job-output-medium: ${{ steps.coverity-step.outputs.medium-count }}
      coverity-job-output-low: ${{ steps.coverity-step.outputs.low-count }}
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3

      - name: Print GITHUB_RUN_ID
        shell: bash
        run: |
          echo "Ref name is $GITHUB_RUN_ID"
          echo "Source is ${{ github.server_url }}/${{ github.repository }}"
          echo "Subject is $GITHUB_WORKFLOW_REF|${{ github.run_id }}|${{ github.run_attempt }}|${{ github.run_number }}"
          echo "Job is $GITHUB_JOB"
          echo "Step id is ${{ steps.internal.id }}"

      - id: coverity-step
        name: Coverity scan
        uses: cloudbees-io-gha/coverity-scan-publish@v2
        with:
          step-id: "coverity-scan"
          server-url: ${{ vars.COVERITY_SERVER_URL }}
          api-token: ${{ secrets.COVERITY_API_TOKEN_V }}

      - name: Notify failures
        if: ${{ failure() }}
        uses: ./actions/notify-slack-action
        with:
          webhook-url: ${{ secrets.CBP_BT_SLACK_WEBHOOK_URL }}
          action-name: coverity-scan-publish

      - id: print-outputs-from-coverity-step
        name: Print outputs from upstream coverity step
        shell: bash
        run: |
            #printing all outputs
            echo "Outputs from upstream coverity step:"
            echo "Critical Count: ${{steps.coverity-step.outputs.critical-count}}"
            echo "Very High Count: ${{steps.coverity-step.outputs.very-high-count}}"
            echo "High Count: ${{steps.coverity-step.outputs.high-count}}"
            echo "Medium Count: ${{steps.coverity-step.outputs.medium-count}}"
            echo "Low Count: ${{steps.coverity-step.outputs.low-count}}"

  gitleaks-scan-publish:
    runs-on: ubuntu-latest
    outputs:
      gitleaks-job-output-critical: ${{ steps.gitleaks-step.outputs.critical-count }}
      gitleaks-job-output-very-high: ${{ steps.gitleaks-step.outputs.very-high-count }}
      gitleaks-job-output-high: ${{ steps.gitleaks-step.outputs.high-count }}
      gitleaks-job-output-medium: ${{ steps.gitleaks-step.outputs.medium-count }}
      gitleaks-job-output-low: ${{ steps.gitleaks-step.outputs.low-count }}
      
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3

      - name: Print GITHUB_RUN_ID
        shell: bash
        run: |
          echo "Ref name is $GITHUB_RUN_ID"
          echo "Source is ${{ github.server_url }}/${{ github.repository }}"
          echo "Subject is $GITHUB_WORKFLOW_REF|${{ github.run_id }}|${{ github.run_attempt }}|${{ github.run_number }}"
          echo "Job is $GITHUB_JOB"
          echo "Step id is ${{ steps.internal.id }}"

      - id: gitleaks-step
        name: Gitleaks scan
        uses: cloudbees-io-gha/gitleaks-scan-publish@v1

      - name: Notify failures
        if: ${{ failure() }}
        uses: ./actions/notify-slack-action
        with:
          webhook-url: ${{ secrets.CBP_BT_SLACK_WEBHOOK_URL }}
          action-name: gitleaks-scan-publish

      - id: print-outputs-from-gitleaks-step
        name: Print outputs from upstream gitleaks step
        shell: bash
        run: |
            #printing all outputs
            echo "Outputs from upstream gitleaks step:"
            echo "Critical Count: ${{steps.gitleaks-step.outputs.critical-count}}"
            echo "Very High Count: ${{steps.gitleaks-step.outputs.very-high-count}}"
            echo "High Count: ${{steps.gitleaks-step.outputs.high-count}}"
            echo "Medium Count: ${{steps.gitleaks-step.outputs.medium-count}}"
            echo "Low Count: ${{steps.gitleaks-step.outputs.low-count}}" 

  gosec-scan-publish:
    runs-on: ubuntu-latest
    outputs:
      gosec-job-output-critical: ${{ steps.gosec-step.outputs.critical-count }}
      gosec-job-output-very-high: ${{ steps.gosec-step.outputs.very-high-count }}
      gosec-job-output-high: ${{ steps.gosec-step.outputs.high-count }}
      gosec-job-output-medium: ${{ steps.gosec-step.outputs.medium-count }}
      gosec-job-output-low: ${{ steps.gosec-step.outputs.low-count }}
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3

      - name: Print GITHUB_RUN_ID
        shell: bash
        run: |
          echo "Ref name is $GITHUB_RUN_ID"
          echo "Source is ${{ github.server_url }}/${{ github.repository }}"
          echo "Subject is $GITHUB_WORKFLOW_REF|${{ github.run_id }}|${{ github.run_attempt }}|${{ github.run_number }}"
          echo "Job is $GITHUB_JOB"
          echo "Step id is ${{ steps.internal.id }}"
      - id: gosec-step
        name: Gosec scan
        uses: cloudbees-io-gha/gosec-scan-publish@v1

      - name: Notify failures
        if: ${{ failure() }}
        uses: ./actions/notify-slack-action
        with:
          webhook-url: ${{ secrets.CBP_BT_SLACK_WEBHOOK_URL }}
          action-name: gosec-scan-publish

      - id: print-outputs-from-gosec-step
        name: Print outputs from upstream gosec step
        shell: bash
        run: |
            #printing all outputs
            echo "Outputs from upstream gosec step:"
            echo "Critical Count: ${{steps.gosec-step.outputs.critical-count}}"
            echo "Very High Count: ${{steps.gosec-step.outputs.very-high-count}}"
            echo "High Count: ${{steps.gosec-step.outputs.high-count}}"
            echo "Medium Count: ${{steps.gosec-step.outputs.medium-count}}"
            echo "Low Count: ${{steps.gosec-step.outputs.low-count}}"

  grype-scan-publish:
    runs-on: ubuntu-latest
    outputs:
      grype-job-output-critical: ${{ steps.grype-step.outputs.critical-count }}
      grype-job-output-very-high: ${{ steps.grype-step.outputs.very-high-count }}
      grype-job-output-high: ${{ steps.grype-step.outputs.high-count }}
      grype-job-output-medium: ${{ steps.grype-step.outputs.medium-count }}
      grype-job-output-low: ${{ steps.grype-step.outputs.low-count }}
      
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Print GITHUB_RUN_ID
        run: echo "Ref name is $GITHUB_RUN_ID"

      - name: Create empty JSON file in workspace
        run: |
          FILE_PATH="$GITHUB_WORKSPACE/store/request/request.json"
          mkdir -p "$(dirname "$FILE_PATH")"
          touch "$FILE_PATH"
          echo "File created at: $FILE_PATH"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker build -t myapp:latest .

      - name: Save Docker image as TAR file
        run: |
          docker save -o output.tar myapp:latest
          tar -tf output.tar
          
      - id: grype-step
        name: Grype scan
        uses: cloudbees-io-gha/grype-scan-publish@v1
        with:
          binary-tar-path: output.tar

      - name: Notify failures
        if: ${{ failure() }}
        uses: ./actions/notify-slack-action
        with:
          webhook-url: ${{ secrets.CBP_BT_SLACK_WEBHOOK_URL }}
          action-name: grype-scan-publish

      - id: print-outputs-from-grype-step
        name: Print outputs from upstream grype step
        shell: bash
        run: |
            #printing all outputs
            echo "Outputs from upstream grype step:"
            echo "Critical Count: ${{steps.grype-step.outputs.critical-count}}"
            echo "Very High Count: ${{steps.grype-step.outputs.very-high-count}}"
            echo "High Count: ${{steps.grype-step.outputs.high-count}}"
            echo "Medium Count: ${{steps.grype-step.outputs.medium-count}}"
            echo "Low Count: ${{steps.grype-step.outputs.low-count}}"

  trivy-scan-publish:
    runs-on: ubuntu-latest 
    outputs:
      trivy-job-output-critical: ${{ steps.trivy-step.outputs.critical-count }}
      trivy-job-output-very-high: ${{ steps.trivy-step.outputs.very-high-count }}
      trivy-job-output-high: ${{ steps.trivy-step.outputs.high-count }}
      trivy-job-output-medium: ${{ steps.trivy-step.outputs.medium-count }}
      trivy-job-output-low: ${{ steps.trivy-step.outputs.low-count }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Print GITHUB_RUN_ID
        run: echo "Ref name is $GITHUB_RUN_ID"

      - name: Create empty JSON file in workspace
        run: |
          FILE_PATH="$GITHUB_WORKSPACE/store/request/request.json"
          mkdir -p "$(dirname "$FILE_PATH")"
          touch "$FILE_PATH"
          echo "File created at: $FILE_PATH"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker build -t myapp:latest .

      - name: Save Docker image as TAR file
        run: |
          docker save -o output.tar myapp:latest
          tar -tf output.tar

      - id: trivy-step
        name: Run Trivy scan
        uses: cloudbees-io-gha/trivy-scan-publish@v2
        with:
          binary-tar-path: output.tar
          run_id: "14377182881"
          job_id: $JOB_ID
          step_id: $STEP_ID 

      - name: Notify failures
        if: ${{ failure() }}
        uses: ./actions/notify-slack-action
        with:
          webhook-url: ${{ secrets.CBP_BT_SLACK_WEBHOOK_URL }}
          action-name: trivy-scan-publish

      - id: print-outputs-from-trivy-step
        name: Print outputs from upstream trivy step
        shell: bash
        run: |
            #printing all outputs
            echo "Outputs from upstream trivy step:"
            echo "Critical Count: ${{steps.trivy-step.outputs.critical-count}}"
            echo "Very High Count: ${{steps.trivy-step.outputs.very-high-count}}"
            echo "High Count: ${{steps.trivy-step.outputs.high-count}}"
            echo "Medium Count: ${{steps.trivy-step.outputs.medium-count}}"
            echo "Low Count: ${{steps.trivy-step.outputs.low-count}}"

  publish-evidence-item:
    runs-on: ubuntu-latest
    steps:        
      - name: Checkout
        uses: actions/checkout@v3

      - name: Publish evidence to Platform
        uses: cloudbees-io-gha/publish-evidence-item@v2
        with:
          content: "Evidence : PROD-Validation-test"
      
      - name: Notify failures
        if: ${{ failure() }}
        uses: ./actions/notify-slack-action
        with:
          webhook-url: ${{ secrets.CBP_BT_SLACK_WEBHOOK_URL }}
          action-name: publish-evidence-item

  register-build-artifact:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Register Build Artifact
        id: artifact
        uses: cloudbees-io-gha/register-build-artifact@v3
        with:
          name: "artifact-demo"
          version: 1.0.0
          url: "ghcr.io/haakaashbee/testaction/prod-artifact:latest"
          digest: "sha256:566b1117a16243a43be01e378a20ee823c95d00cd5f3231ad4d168f53d99d9d8"
          type: "docker"
          label: 'QA,production'

      - name: Notify failures
        if: ${{ failure() }}
        uses: ./actions/notify-slack-action
        with:
          webhook-url: ${{ secrets.CBP_BT_SLACK_WEBHOOK_URL }}
          # action name (as per cloudbees-io) and this file name must be action name with .yaml extension
          # this agreement is a prerequisite to send workflow urls in slack notifications in case of failure
          action-name: register-build-artifact

      - name: Test output
        run: echo '${{ steps.artifact.outputs.cbp_artifact_id }}'

  label-artifact-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Register Build Artifact
        id: artifact
        uses: cloudbees-io-gha/register-build-artifact@v3
        with:
          name: "artifact-demo"
          version: 1.0.0
          url: "ghcr.io/haakaashbee/testaction/prod-artifact:latest"
          digest: "sha256:566b1117a16243a43be01e378a20ee823c95d00cd5f3231ad4d168f53d99d9d8"
          type: "docker"
          label: 'QA,production'

      - name: Test output
        run: echo '${{ steps.artifact.outputs.cbp_artifact_id }}'

      - name: Add labels
        uses: cloudbees-io-gha/label-artifact-version@v1
        with:
          artifact-id: ${{ steps.artifact.outputs.cbp_artifact_id }}
          labels: "stagging"

      - name: Notify failures
        if: ${{ failure() }}
        uses: ./actions/notify-slack-action
        with:
          webhook-url: ${{ secrets.CBP_BT_SLACK_WEBHOOK_URL }}
          action-name: label-artifact-version

  publish-test-results:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          repository: apache/commons-lang
          
      - name: Run Tests with Maven
        run: |
          mvn test -Dtest=StringUtilsTest
          ls -lrt
          
      - name: Upload Test Results to GitHub Artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: test-results
          path: target/surefire-reports/*

      - name: Notify failures
        if: ${{ failure() }}
        uses: ./actions/notify-slack-action
        with:
          webhook-url: ${{ secrets.CBP_BT_SLACK_WEBHOOK_URL }}
          action-name: publish-test-results

        
